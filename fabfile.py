import pipes
import os
import posixpath
from fabric.api import run, put
from fabric.contrib.files import append

# Recomended environment for production: Ubuntu 14.04

# Site layout on production:
# /var/www/<SITE-NAME>/
#   django-site/ - Django site itself, with manage.py script and wvpoi directory
#   virtualenv/ - Python virtual environment with everything needed to run the site
#   listings/ - directory with listings, generated by the tool
#   dumps/ - directory with raw Wikivoyage dumps
#   tool/ - directory with the tool to create listing files out of Wikivoyage dumps
#   daily-update.sh - script to run the tool on a daily basis
# /etc/apache2/sites-available/<SITE-NAME>.conf - Apache configuration file


# ======================= Common constants =====================================


site_name = 'wvpoi.batalex.ru'
site_root_dir = posixpath.join('/var/www', site_name)
django_site_dir = posixpath.join(site_root_dir, 'django-site')
virtualenv_dir = posixpath.join(site_root_dir, 'virtualenv')
listings_dir = posixpath.join(site_root_dir, 'listings')
dumps_dir = posixpath.join(site_root_dir, 'dumps')
tool_dir = posixpath.join(site_root_dir, 'tool')
daily_update_script = posixpath.join(site_root_dir, 'daily-update.sh')
apache_configuration_file = posixpath.join(
    '/etc/apache2/sites-available', '%s.conf' % (site_name)
)


# ======================= Top-level deployment actions =========================


def full_deploy():
    """Perform full deploy/re-deploy of the site"""
    install_requirements()
    create_site_root_dir()
    configure_virtualenv()
    upload_site()
    create_static_dirs()
    configure_apache()
    

# ======================= Install required software ===========================


def install_requirements():
    """Install all required software to run the site"""
    update_package_lists()
    install_apache()
    install_mod_wsgi()
    install_pip()
    install_virtualenv()


def update_package_lists():
    """Update lists of packages available for installation with 'apt-get update'"""
    run('apt-get update')


def install_apache():
    _install_package('apache2')


def install_mod_wsgi():
    _install_package('libapache2-mod-wsgi')


def install_pip():
    _install_package('python-pip')


def install_virtualenv():
    _install_python_package('virtualenv')


# ======================= Create site root directory ==========================


def create_site_root_dir():
    _create_dir(site_root_dir)


# ======================= Virtual environment configuration ===================


def configure_virtualenv():
    _remove_dir(virtualenv_dir)
    _create_virtualenv(virtualenv_dir)
    _install_virtualenv_package(virtualenv_dir, 'django')


def _create_virtualenv(dir_name):
    """Create virtual environment in specified directory"""
    run('virtualenv %s' % pipes.quote(dir_name))


def _install_virtualenv_package(dir_name, package_name):
    """Install Python package into virtual environment"""
    run('/bin/bash -c "source %s/bin/activate && pip install %s"' % (
        pipes.quote(dir_name), pipes.quote(package_name)
    ))


# ======================= Upload Django site ==================================


def upload_site():
    _remove_dir(django_site_dir)
    put('django-site', site_root_dir)



# ======================= Configure Apache =====================================

def configure_apache():
    apache_config = """
WSGIPythonPath {django_site_dir}:{virtualenv_dir}/lib/python2.7/site-packages/

<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html
    ServerName {site_name}
    ServerAlias www.{site_name}

    WSGIScriptAlias / {django_site_dir}/wvpoi/wsgi.py
    Alias /download/listings {listings_dir}
    Alias /download/dumps {dumps_dir}
    Alias /download/tool {tool_dir}

    <Directory {django_site_dir}/wvpoi>
        <Files wsgi.py>
            Require all granted
        </Files>
    </Directory>
</VirtualHost>

    """.format(
        site_name=site_name,
        django_site_dir=django_site_dir, virtualenv_dir=virtualenv_dir,
        listings_dir=listings_dir, dumps_dir=dumps_dir, tool_dir=tool_dir
    )
    _remove_file(apache_configuration_file)
    append(apache_configuration_file, apache_config)
    _enable_apache_site(site_name)
    _restart_service('apache2')


# ======================= Create static directories ===========================


def create_static_dirs():
    _create_dir(listings_dir)
    _create_dir(dumps_dir)
    _create_dir(tool_dir)


# ======================= Auxiliary functions ==================================


def _remove_file(file_name):
    """Remove file. If file does not exist - just skip"""
    run("rm -f %s" % (pipes.quote(file_name)))


def _remove_dir(dir_name):
    """Remove directory with all contents. If directory does not exist - just skip"""
    run("rm -rf %s" % (pipes.quote(dir_name)))


def _create_dir(dir_name):
    """Create directory with all parents. If directory exists - just skip"""
    run("mkdir -p %s" % (pipes.quote(dir_name)))


def _enable_apache_site(site_name):
    """Enable Apache site by name"""
    run('a2ensite %s' % site_name)


def _install_package(package_name):
    """Install system package with apt-get"""
    run('apt-get -y install %s' % pipes.quote(package_name))


def _restart_service(service_name):
    """Restart service specified by name"""
    run('service %s restart' % service_name)


def _install_python_package(package_name):
    """Install Python package with PIP"""
    run('pip install %s' % (pipes.quote(package_name)))

